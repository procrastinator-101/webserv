#ifndef REQUEST_HPP
# define REQUEST_HPP


#include <sstream>
#include <iomanip>
#include <string>
#include <sys/_types/_size_t.h>
#include <vector>

#include "../stdlib/stdlib.hpp"
#include "../header_field/HeaderField.hpp"

namespace ft
{
	class Request
	{
		//================================================================================================
		//	attributes
		//================================================================================================
		private:
			std::string					_msg;
			std::string					_method;
			std::string					_path;
			std::string					_version;
			std::vector<HeaderField>	_headers;
			std::string					_body;
		//================================================================================================
		//	attributes End
		//================================================================================================
		//================================================================================================
		//	destructors, constructors, and assignment operators
		//================================================================================================
		public:
			Request();
			~Request();

			Request(std::string& msg);
			Request(const Request& src);

			Request	&operator=(const Request& rop);
		//================================================================================================
		//	destructors, constructors, and assignment operators End
		//================================================================================================


		//================================================================================================
		//	Request operations
		//================================================================================================
		public:
			void	_parseMessage();
			size_t	_parseStartLine(std::vector<std::string>& msgLines);
			size_t	_parseHeaders(std::vector<std::string>& msgLines, size_t offset);
			size_t	_parseBody(std::vector<std::string>& msgLines, size_t offset);
		//================================================================================================
		//	Request operations End
		//================================================================================================

		//================================================================================================
		//	private methods
		//================================================================================================
		private:
			void	_deepCopy(const Request& src);
		//================================================================================================
		//	private methods End
		//================================================================================================

		//================================================================================================
		//	overload << for Sockt
		//================================================================================================
		public:
			friend std::ostream	&operator<<(std::ostream& ostr, const Request& request);
		//================================================================================================
		//	overload << for Sockt End
		//================================================================================================
	};
}

#endif