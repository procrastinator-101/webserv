#ifndef RESPONSE_HPP
# define RESPONSE_HPP

#include <string>
#include <vector>
#include <iomanip>
#include <fstream>

#include "../stdlib/stdlib.hpp"

#include "../http_status/HttpStatus.hpp"
#include "../header_field/HeaderField.hpp"

namespace ft
{
	class Response
	{
		friend class Client;
		
		//================================================================================================
		//	attributes
		//================================================================================================
		private:
			std::string					_version;
			HttpStatus					_status;
			std::vector<HeaderField>	_headers;
			std::string					_bodyFileName;
			std::fstream				_body;
		//================================================================================================
		//	attributes End
		//================================================================================================
		//================================================================================================
		//	destructors, constructors, and assignment operators
		//================================================================================================
		public:
			Response();
			~Response();

		private:
			Response(const Response& src);
			Response	&operator=(const Response& rop);
		//================================================================================================
		//	destructors, constructors, and assignment operators End
		//================================================================================================


		//================================================================================================
		//	Response operations
		//================================================================================================
		public:
		//================================================================================================
		//	Response operations End
		//================================================================================================

		//================================================================================================
		//	private methods
		//================================================================================================
		private:
			void	_deepCopy(const Response& src);
		//================================================================================================
		//	private methods End
		//================================================================================================


		//================================================================================================
		//	overload << for Response
		//================================================================================================
		public:
			friend std::ostream	&operator<<(std::ostream& ostr, const Response& response);
		//================================================================================================
		//	overload << for Response End
		//================================================================================================
	};
}

#endif