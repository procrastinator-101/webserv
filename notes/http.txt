http
=================================================================================================
pipelining :
	-	(http 1.1 disabled by default)
	-	a request is sent before the response for the previous request is received.
	-	the responses are then ordered by the client.


http 2:
	multiplexing : shove multiple request in one tcp request
	compression
	secure by default
	protocol negotiation during TLS (NPN/ALPN) to communicate with older protocols (1.0, 1.1)
=================================================================================================



http request
=================================================================================================
Components:
	-	URL
	-	method type
	-	headers
	-	body


methods:
	-	get : retrieve a piece of data
	-	post : create a new piece of data
	-	put : create or update a piece of data at this specific URL


request format :
	-	start line
		-	request method
		-	request URI
		-	HTTP version
		Ex : GET /index.html HTTP/1.1
	-	header
	-	empty line
	-	body
=================================================================================================


http response
=================================================================================================
Components:
	-	status line
	-	headers
	-	body

status codes :
	*	success:
		-	200 : ok
		-	204 : no content
	*	redirection
		-	307 : temporary redirect
		-	308 : permanent redirect
	*	client errors
		-	400 : bad request
		-	401 : unauthorized
		-	404 : not found
		-	405 : method not allowed
	*	server errors
		-	500 : server internal error
		-	503 : server unavailable : server down for maintenance or overloaded


http response format
	status line : http version [sp] status code [sp] status meaning
		Ex : HTTP/1.1 200 OK
	header
	body
=================================================================================================

=================================================================================================

=================================================================================================

=================================================================================================
GET:
	-	body : no, but the spec does not forbid it
	-	cacheable : yes
=================================================================================================

=================================================================================================
POST:
	-	body : yes
	-	cacheable : Only if freshness information is included
=================================================================================================

=================================================================================================
DELETE:
	-	body : may
	-	cacheable : no

responses:
	-	202 : status code if the action will likely succeed but has not yet been enacted.
	-	204 : status code if the action has been enacted and no further information is to be supplied.
	-	200 : status code if the action has been enacted and the response message includes a 
			  representation describing the status (like an html index saying that the resource is 
			  deleted).
=================================================================================================


=================================================================================================
headers:
	connection :
		-	forbidden header name : true
		-	values:
			-	keep-alive :  default http/1.1
			-	close :  default http/1.0
	Content-Type :
		-	media-type
		-	charset
		-	boundary


header syntax:
	-	key: <whitespace> value

supported http headers
	*	response headers
		-	Content-Type
		-	Content-Length
		-	Connection
		-	Transfer-Encoding
	*	request headers
		-	Accept??
		-	Connection
		-	Content-Length
			-	must not be present is Transfer-Encoding is present
		-	Content-Type
		-	Host
			-	syntax name[:port]
			-	port defaults to service port.
			-	duplicates : bad request
			-	must be present
			-	may be empty
		-	Transfer-Encoding
		-	Trailer


-	Transfer-Encoding:
	-	other than chunked :
		-	apply chunked as a final Transfer coding
		or
		-	terminate the message by closing the connection
	-	may not be sent on response of status code 1xx or 204.
	-	A server MUST NOT send a Transfer-Encoding header field in any 2xx (Successful) response 
		to a CONNECT request.
	-	A server that receives a request message with a transfer coding it does not understand 
		SHOULD respond with 501 (Not Implemented).
	-	A server ought to limit the total length of chunk extensions received in a request to
		an amount reasonable for the services provided. Then return a 4xx client error response.


-	Trailer:
	-	must not include :
		-	message framing headers: (?)
			-	Transfer-Encoding
			-	Content-Length
		-	routing: (?)
			-	Host
		-	request modifiers (?)
			-	controls
				-	Cache-Control
				-	Expect
				-	Host
				-	Max-Forwards
				-	Pragma
				-	Range
				-	TE
		-	authentication headers: (?)
			-	Authorization
			-	Set-Cookie
		-	response control data
			-	Age
			-	Cache-Control
			-	Expires
			-	Date
			-	Location
			-	Retry-After
			-	Vary
			-	Warning
		-	headers determining how to process the payload
			-	Content-Encoding
			-	Content-Type
			-	Content-Range
			-	Trailer
	-	these headers may be ignored or considered an error by the recepient
=================================================================================================

=================================================================================================
request format state
	-	fataly bad :
		-	content-length : negative or exceeds the size of the size_t
		*	stop reading and send badRequest response then close the connection
	-	bad
		*	read all the request then send badRequest response
	-	good
=================================================================================================