-	initiate servers:
	for each server
		-	create a socket
		-	bind it to an address
		-	listen on that socket
-	add all the servers the monitored fds
-	select on the monitored fds
	*	if ready to read
		-	fd is server socket:
			-	accept the connection
			-	add the new connection to the monitored fds
		-	fd is a client socket
			-	recv
			-	handle request
	*	if ready to write
		-	fd is server socket:
			-	ignore
		-	fd is a client socket
			-	handle response
			-	send


handle request:
	-	parse request

handle response:
	-	

server:
	-	socket : ip port
	-	servernames
	-	root
	-	allowed methods
	-	indexes
	-	error pages
	-	served locations
	-	clients


location:
	-	root
	-	auto index
	-	allowed methods
	-	indexes
	-	redirections
	-	uploadPath
	-	default served file??


client:
	-	socket
	-	request
	-	response
	-	keep alive


request:
	-	msg
	-	method
	-	path
	-	version
	-	headers
	-	body


header :
	-	key
	-	value
	+	checkValidity

response:
	-	msg
	-	version
	-	HttpStatus
	-	headers : from the request or/and cgi
	-	body


HttpStatus:
	code
	msg

sockt:
	-	create
	-	bind
	-	listen
	-	connect
	-	accept
	-	send
	-	receive

serverSockt:
	-	setup
	-	wakeup

clientSockt
	-	setup
	-	wakeup


nginy
token = server
	server tmp(configFile)
		_locations.insert(location tmp(configFile));


multiplex:
	*	
	-	add fd
	-	delete fd
	-	multiplexFunction -> fetch


