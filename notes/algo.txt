
=====================================================================================================
nginy:
-	initiate servers:

-	for each server
		-	create a socket
		-	bind it to an address
		-	listen on that socket
-	add all the servers the read monitored fds

-	select on the monitored fds
	*	if ready to read
		-	fd is server socket
			-	accept the connection
			-	add the new connection to the monitored fds
		-	fd is a client socket
			-	recv
			-	handle request
			-	remove fd from the read monitered fds and add it to the write monitered fds
	*	if ready to write (a server fd is never going to be here)
			-	handle response
			-	send
=====================================================================================================

=====================================================================================================
handle request:
	*	receive request
	*	if request is well formated
		-	fetch the targeted host
	*	prepare the response
	*	reset request
	*	send response
	*	reset response
=====================================================================================================

=====================================================================================================
*	receive request
	-	read to a buffer
	-	check if there is a blank line
		-	yes:
			-	add what is before it to msg
			-	parse the msg (startLine + headers)
			-	write what is after it to a tmp file to hold the body
			-	update bodySize
		-	no
			-	add the buffer to the msg
	-	use the bodySize to know when to stop reading
=====================================================================================================


=====================================================================================================
prepare the response
	-	build statusLine
		-	version
		-	status code
		-	status message
	-	build headers
		-	content-length
=====================================================================================================


=====================================================================================================
send response
	-	send the msg (statusLine + headers)
	-	update the sentBytes
	-	send the body
	-	update the sentBytes


*	send response:
	-	!isHeaderSent
		-	buffer + (msg + sent)
		-	if header is sent 
			-	isHeaderSent = 1
	-	isHeaderSent
		-	fill str from body
		-	buffer + str
=====================================================================================================


=====================================================================================================
chunked:
	-	get chunk (until \r\n)
	-	parse it to :
		-	chunk size (hex)
		-	extension : ignore it
	-	chunk size != 0
		-	get chunked data (until \r\n)
	-	else
		-	get Trailer headers
		-	if a header is not present in the trailer header list : error
		-	stop until blank line is reached
	-	update content-Length
	-	Remove "chunked" from Transfer-Encoding
    -	Remove Trailer from existing header fields


*	append buffer to msg
*	is newline found
	-	true:
		-	if new chunk
			-	true: -> initiate the new chunk
				-	fetch chunk size
				-	ignore the rest of the line
			-	false: -> end the chunk
				-	send the line to the body file
				-	update the body size
				-	update the chunk length
		-	slice the line from the msg
	-	false:
		-	if new chunk
			-	true:
				-	do nothing
			-	false:
				-	send the msg except the last character to the body file
				-	msg should contain the last character of it only

newLine at the beginning of buffer
	-	isInChunk:
		-	chunklen == chunkSize
			-	true : 
				-	continue;
			-	false :
				-	fatal
				-	end transmission
	-	isNotInChunk:
		-	fatal
		-	end transmission


*	\r\n
*	-	\r
	-	\n

=====================================================================================================


=====================================================================================================
server
	*	_parse server block
		-	host
		-	socket
		key = listen
			socket = fetchServeSocket
		else
			_fetchHost(lineStream, key, host)
	socket servers
		target = servers.find(socket)
		if target == end
			target = create new server
		target.hosts.push_back(host)
=====================================================================================================

=====================================================================================================
split :
	-	string delimiter, no multiple traversal
	-	string of delimiters, multiple traversal

strtok :
	-	string of delimiters, multiple traversal
	-	string delimiter, no multiple traversal
=====================================================================================================